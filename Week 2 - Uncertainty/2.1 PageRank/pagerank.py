import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    # init a dictionary with same keys as corpus and 0 values
    dist = dict.fromkeys(corpus.keys(), 0)
    # get outgoing links from page
    links_from_page = corpus[page]

    # if no outgoing link -> random link from all pages
    if len(links_from_page) == 0:
        for link in corpus.keys():
            dist[link] = dist[link] + (1 / len(corpus))
        return dist

    # random link from the ones starting from the page
    # with probability of dumpling_factor
    for link in links_from_page:
        dist[link] = dist[link] + (1 / len(links_from_page)) * damping_factor

    # random link from all pages
    # with probability of (1-dumpling_factor)
    for link in corpus.keys():
        dist[link] = dist[link] + (1 / len(corpus)) * (1 - damping_factor)

    return dist


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # init a dictionary with same keys as corpus and 0 values
    rank = dict.fromkeys(corpus.keys(), 0)

    # The first sample is generated by choosing from a page at random
    pages = list(corpus.keys())
    page = random.choice(pages)
    rank[page] = rank[page] + 1 # increment page counter
    dist = transition_model(corpus, page, damping_factor)

    # remaining samples are generated from the previous sample based on the previous sample?s transition model
    count = 2
    while count <= n:
        population = list(dist.keys())
        weights = list(dist.values())
        page = random.choices(population, weights, k=1)[0]
        rank[page] = rank[page] + 1 # increment page counter
        dist = transition_model(corpus, page, damping_factor)
        count += 1 # increment sample counter

    # normalize rank
    for page in rank.keys():
        rank[page] = rank[page] / n

    return rank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    N = len(corpus)
    pages = corpus.keys()
    rank = dict.fromkeys(corpus.keys(), 1/N)
    
    # A page that has no links at all should be interpreted as having one link for every page in the corpus (including itself).
    amended_corpus = get_amended_corpus(corpus)

    while True:
        current_rank = rank
        new_rank = dict.fromkeys(amended_corpus.keys(), 0)
        # update PageRanks
        for page in pages:            
            new_rank[page] = get_page_rank(page, amended_corpus, current_rank, damping_factor)
        rank = new_rank
        # check threshold, break if all values are below
        if change_below_threshold(current_rank.values(), new_rank.values(), 0.001):
            break
    
    return rank


def get_amended_corpus(corpus):
    """
    Returns a modified corpus where empty sets (i.e. pages with no links) are replaced with links to every page.
    """
    amended_corpus = dict()
    for key in corpus.keys():
        value = corpus[key] if corpus[key] != set() else set(corpus.keys())
        amended_corpus[key] = value
    return amended_corpus


def get_page_rank(page, corpus, rank, damping_factor):
    """
    Returns new PageRank of a page based on current rank values.
    """
    N = len(corpus)
    option1 = 1/N
    option2 = sum([rank[i] / len(corpus[i]) for i in corpus.keys() if page in corpus[i]])    
    return (1 - damping_factor) * option1 + damping_factor * option2


def change_below_threshold(current_values, new_values, threshold):
    """
    Returns true if change between the current values and the new values are all below threshold (inclusive).
    """
    differences = [i - j for i, j in zip(new_values, current_values)]
    return all(i <= threshold for i in differences)  


if __name__ == "__main__":
    main()
